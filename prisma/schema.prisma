// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {  
  id          Int      @id @default(autoincrement())
  username    String
  email       String   @unique
  password    String
  country     String
  city        String
  address     String
  postal      String
  pets        HistoricalPetsOwner[]
  bills       ExpensesPetOwner[]
  treatment   TreatmentsPetOwner[]
  posts       Posts[]
  events      HistoricalEventsPetOwner[]
}

model Pet {
  id         Int     @id @default(autoincrement())
  name        String
  species     String
  breed       String  
  birthday    DateTime
  owners      HistoricalPetsOwner[]
  bills       ExpensesPetOwner[]
  treatment   TreatmentsPetOwner[]
  events      HistoricalEventsPetOwner[]
}

model HistoricalPetsOwner {
  id         Int       @id @default(autoincrement())
  owner      User      @relation(fields: [ownerId], references: [id])
  ownerId    Int
  pet        Pet       @relation(fields: [petId], references: [id])
  petId      Int
  dateOwn    DateTime  @default(now())
}

model Event {
  id        Int         @id @default(autoincrement())
  name      String
  desc      String
  city      String
  address   String
  postal    String
  type      EventType   @relation(fields: [typeId], references: [id])
  typeId    Int
  events    HistoricalEventsPetOwner[]
}

model EventType {
  id        Int         @id @default(autoincrement())
  event     String
  events    Event[]
}

model HistoricalEventsPetOwner {
  id         Int        @id @default(autoincrement())
  owner      User       @relation(fields: [ownerId], references: [id])
  ownerId    Int
  pet        Pet        @relation(fields: [petId], references: [id])
  petId      Int
  event      Event      @relation(fields: [eventId], references: [id])
  eventId    Int
  assits     Boolean
  date       DateTime   @default(now())
}

model ExpensesPetOwner {
  id         Int        @id @default(autoincrement())
  amount     Int
  place      String
  owner      User       @relation(fields: [ownerId], references: [id])
  ownerId    Int
  pet        Pet        @relation(fields: [petId], references: [id])
  petId      Int
  date       DateTime
}

model TreatmentsPetOwner {
  id         Int        @id @default(autoincrement())
  treatment  String
  doctor     String
  place      String
  owner      User       @relation(fields: [ownerId], references: [id])
  ownerId    Int
  pet        Pet        @relation(fields: [petId], references: [id])
  petId      Int
  date       DateTime
}

model Posts {
  id         Int        @id @default(autoincrement())
  owner      User       @relation(fields: [ownerId], references: [id])
  ownerId    Int
  tittle     String
  desc       String
  type       PostType   @relation(fields: [typeId], references: [id])
  typeId     Int
  date       DateTime   @default(now())
}

model PostType {
  id        Int         @id @default(autoincrement())
  name      String
  posts     Posts[]
}